package edu.wpi.gripgenerator.templates;


import com.github.javaparser.ASTHelper;
import com.github.javaparser.ast.CompilationUnit;
import com.github.javaparser.ast.ImportDeclaration;
import com.github.javaparser.ast.PackageDeclaration;
import com.github.javaparser.ast.body.ClassOrInterfaceDeclaration;
import com.github.javaparser.ast.body.MethodDeclaration;
import com.github.javaparser.ast.body.ModifierSet;
import com.github.javaparser.ast.expr.MethodCallExpr;
import com.github.javaparser.ast.expr.NameExpr;
import com.github.javaparser.ast.expr.ObjectCreationExpr;
import com.github.javaparser.ast.stmt.BlockStmt;
import com.github.javaparser.ast.stmt.ExpressionStmt;
import com.github.javaparser.ast.type.ClassOrInterfaceType;
import com.github.javaparser.ast.type.VoidType;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.stream.Collectors;

/**
 * The template for the Operation List.
 * This list contains all of the operations that have been generated by the generator.
 */
public class OperationList {
    private final PackageDeclaration packageDec = new PackageDeclaration(new NameExpr("edu.wpi.grip.generated"));
    private static final String className = "CVOperations";
    private final List<ImportDeclaration> imports;
    private final List<Operation> operations;

    /**
     * Constructs the operation list
     *
     * @param imports Any additional imports required for this operation to compile.
     */
    public OperationList(ImportDeclaration... imports) {
        this.imports = new ArrayList(Arrays.asList(imports));
        this.imports.addAll(Arrays.asList(
                new ImportDeclaration(new NameExpr("com.google.common.eventbus.EventBus"), false, false),
                new ImportDeclaration(new NameExpr("edu.wpi.grip.core.events.OperationAddedEvent"), false, false)
        ));
        this.operations = new ArrayList<>();
    }

    public String getClassName() {
        return className;
    }

    /**
     * Adds an operation to the list of Operations to be used in the pipeline.
     *
     * @param operation An operation to add.
     */
    public void addOperation(Operation operation) {
        operations.add(operation);
    }

    private ClassOrInterfaceDeclaration getClassDeclaration() {
        final ClassOrInterfaceType eventBusType = new ClassOrInterfaceType("EventBus");
        final ClassOrInterfaceType eventType = new ClassOrInterfaceType("OperationAddedEvent");

        // This method is how the generated code tells the rest of the application about all of the generated OpenCV
        // operations. It sends an OperationAddedEvent with a new instance of every operation.
        final MethodDeclaration addOperations = new MethodDeclaration(ModifierSet.PUBLIC | ModifierSet.STATIC,
                new VoidType(), "addOperations");

        ASTHelper.addParameter(addOperations, ASTHelper.createParameter(eventBusType, "eventBus"));

        addOperations.setBody(new BlockStmt(this.operations.stream()
                .sorted((o1, o2) -> o1.getOperationClassName().toLowerCase().compareToIgnoreCase(o2.getOperationClassName()))
                .map(Operation::getOperationClassName)
                .map(ClassOrInterfaceType::new)
                // Create a new instance of each operation
                .map(type -> new ObjectCreationExpr(null, type, null))
                // Create a new OperationAddedEvent for every operation
                .map(expr -> new ObjectCreationExpr(null, eventType, Collections.singletonList(expr)))
                // Post all of the events to the event bus
                .map(expr -> new MethodCallExpr(new NameExpr("eventBus"), "post", Collections.singletonList(expr)))
                .map(ExpressionStmt::new)
                .collect(Collectors.toList())));

        final ClassOrInterfaceDeclaration cvoperations = new ClassOrInterfaceDeclaration(ModifierSet.PUBLIC, false,
                "CVOperations");
        cvoperations.setMembers(Collections.singletonList(addOperations));
        return cvoperations;
    }

    /**
     * Generates the CompilationUnit to print to a file.
     *
     * @return The CompilationUnit for this class.
     */
    public CompilationUnit getDeclaration() {
        return new CompilationUnit(
                packageDec,
                this.imports,
                Arrays.asList(getClassDeclaration())
        );
    }

}
