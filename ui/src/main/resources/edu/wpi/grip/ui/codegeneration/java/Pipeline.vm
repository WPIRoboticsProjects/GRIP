#if("${packageName}" != "")package ${packageName};

#end
#set($needsRefClass = false)
#set($lines = false)
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;
import java.util.HashMap;

#if($implementVisionPipeline)
import edu.wpi.first.wpilibj.vision.VisionPipeline;

#end
import org.opencv.core.*;
import org.opencv.core.Core.*;
import org.opencv.features2d.FeatureDetector;
import org.opencv.imgcodecs.Imgcodecs;
import org.opencv.imgproc.*;
import org.opencv.objdetect.*;

/**
* $className class.
*
* <p>An OpenCV pipeline generated by GRIP.
*
* @author GRIP
*/
public class $className #if($implementVisionPipeline)implements VisionPipeline #end{

	//Outputs
#foreach($step in $pipeline.getSteps())
#foreach($out in $step.getOutputs())
	private #socketType(${out.type()}) ${tMeth.name($out.name())}#if(!$out.mutable()) = new #socketType(${out.type()})()#end;
#end
#end

#if($pipeline.getMovingThresholds().size() gt 0)

	//Moving Thresholds
#end
#foreach($moving in $pipeline.getMovingThresholds())
    private Mat lastImage$moving.num() = new Mat();
#end
#foreach($step in $pipeline.getSteps())
#if($step.name() == "Switch" || $step.name() == "Valve")
#set($boolInp = $step.getInput(0))
#set($boolName = "$tMeth.name($boolInp.name())")
	private boolean $boolName#if($boolInp.hasValue()) = $boolInp.value()#end;
#end
#end
#if(!$testing)
	static {
		System.loadLibrary(Core.NATIVE_LIBRARY_NAME);
	}
#end

	/**
	 * This is the primary method that runs the entire pipeline and updates the outputs.
	 */
#if($implementVisionPipeline)
	@Override#end
	public void process(#foreach($source in $pipeline.getSources())#socketType(${source.type()}) ${source.value()}#if($pipeline.getSources().indexOf($source) lt $pipeline.getSources().size() - 1), #end#end) {
#foreach($step in $pipeline.getSteps())
		// Step $step.name()$step.num():
#parse("$vmLoc/CV Step.vm")

#end
	}

#foreach($step in $pipeline.getSteps())
#if($step.name() == "Switch" || $step.name() == "Valve")
#set($boolInp = $step.getInput(0))
#set($boolName = "$tMeth.name($boolInp.name())")
#if($boolInp.hasValue())
	/**
	 * This method is a generated setter for the condition of $step.name()
	 * @param the condition to set
	 */
	 public void set$tMeth.name($step.name())$step.num()(boolean value) {
	 	$boolName = value;
	 }

#end
#end
#end
#foreach($step in $pipeline.getSteps())
#foreach($output in $step.getOutputs())
	/**
	 * This method is a generated getter for the output of a $step.name().
	 * @return #socketType(${output.baseType()}) output from $step.name().
	 */
	public #socketType(${output.baseType()}) ${tMeth.getterName($output.name())}() {
		return ${tMeth.name($output.name())};
	}

#end
#end

#foreach($step in $pipeline.getUniqueSteps())
#set($toParse = "$vmLoc/operations/" + $step.name())
#set($toParse = $toParse + ".vm")
#parse($toParse)


#end

#if($needsRefClass)
#parse("$vmLoc/Ref.vm")
#end


}
