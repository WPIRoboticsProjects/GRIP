	/**
	 * Isolates overlapping objects from the background and each other.
	 *
	 * @param input The image used to create the watershed.
	 * @param contours The contours used to create the watershed.
	 * @param output The image where the output is stored.
	 */
	void $fileName::#func($step ["input", "contours", "output"]) {
		cv::Mat markers(input->size(), cv::CV_32SC1, cv::Scalar(0.0));
		for (int i = 0; i < contours->size(); i++) {
			cv::drawContours(markers, contours, i, cv::Scalar::all((i + 1) * (255/contours->size())));
			}
		cv::circle(markers, cv::Point(5, 5), 3, cv::Scalar::all(255), -1, LINE_8, 0);
		cv::watershed(input, markers);
		markers->convertTo(output, cv::CV_8UC1);
		cv::bitwise_not(output, output);
	}
