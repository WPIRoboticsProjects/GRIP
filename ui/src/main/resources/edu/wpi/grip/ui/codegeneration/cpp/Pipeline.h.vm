#set($lines = false)
#pragma once
#if($testing)
\#include "AbsPipeline.h"
\#include <String>
#end
\#include <opencv2/objdetect/objdetect.hpp>
\#include <opencv2/highgui/highgui.hpp>
\#include <opencv2/imgproc/imgproc.hpp>
\#include <opencv2/contrib/contrib.hpp>
\#include <opencv2/core/core.hpp>
\#include <opencv2/features2d.hpp>
\#include <iostream>
\#include <stdio.h>
\#include <stdlib.h>
\#include <map>
\#include <math.h>

namespace grip {

#foreach($step in $pipeline.getUniqueSteps())
#if($step.name().equals("Find_Lines") || $step.name().equals("Filter_Lines"))
#parse("$vmLoc/operations/Lines.vm")
#end
#enumType($step)
#end
/**
* $fileName class.
* 
* Autogenerated Pipeline from GRIP
*
* Make sure to set sources before running process()
*/
class $fileName #if($testing): public AbsPipeline #end{
	private:
#foreach( $source in $pipeline.getSources())
		#cType($source.type()) $source.value();
#end
#foreach($step in $pipeline.getSteps())
#if($step.name() == "Switch" || $step.name() == "Valve")
#set($boolInp = $step.getInput(0))
#set($boolName = "$boolInp.name()")
#if($boolInp.hasValue())
		bool $tMeth.name($boolName);
#end
#end
#end
#foreach($step in $pipeline.getSteps())
#foreach($output in $step.getOutputs())
		#cType($output.type()) $tMeth.name($output.name());
#end
#end
#foreach($moving in $pipeline.getMovingThresholds())
		cv::Mat lastImage$moving.num();
#end
#foreach($step in $pipeline.getUniqueSteps())
#if($step.name() == "Switch" || $step.name() == "Valve")
		template<typename T>
#end
		void #headerFunc($step);
#end

	public:
		$fileName();
		void Process();
#foreach($source in $pipeline.getSources())
		void #setter($source);
#end
#foreach($step in $pipeline.getSteps())
#if($step.name() == "Switch" || $step.name() == "Valve")
#set($boolInp = $step.getInput(0))
#set($boolName = "$boolInp.name()")
#if($boolInp.hasValue())
	 	void set$step.name()${step.num()}(bool value);
#end
#end
#end
#foreach($step in $pipeline.getSteps())
#foreach($out in $step.getOutputs())
#set($outSym = "#funPassType($output.type())")
#if($out.type().equals("Boolean"))
#set($ptr = false)
#elseif($out.type().equals("Number"))
#set($ptr = false)
#elseif($outSym.equals("&") || $testing)
#set($ptr = true)
#else
#set($ptr = false)
#end
		#cType($out.type())#if($ptr)*#end ${tMeth.getterName($out.name())}();
#end
#end
};

#if($testing)
extern "C" DLL_TYPE AbsPipeline * makePipeline();
#end

} // end namespace grip

