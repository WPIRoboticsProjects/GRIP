import edu.wpi.first.wpilib.opencv.installer.Installer

plugins {
    id('application')
    id('javafx-gradle-plugin')
}

if(!(project.hasProperty('generation') || project.hasProperty('genonly'))){
    sourceSets {
        test {
            java {
                exclude "**/ui/codegeneration"
                exclude "**/ui/codegeneration/**"
            }
        }
    }
}

dependencies {
    compile project(':core')
    compile project(':ui:preloader')
    //ideProvider project(path: ':core', configuration: 'compile')
    compile group: 'org.controlsfx', name: 'controlsfx', version: '8.40.11'
    compile group: 'com.hierynomus', name: 'sshj', version: '0.16.0'
    compile group: 'org.apache.velocity', name: 'velocity', version: '1.7'
    testCompile files(project(':core').sourceSets.test.output)
    testCompile files(project(':core').sourceSets.test.output.resourcesDir)
    testCompile group: 'org.testfx', name: 'testfx-core', version: '4.0.5-alpha'
    testCompile group: 'org.testfx', name: 'testfx-junit', version: '4.0.5-alpha'
    testRuntime group: 'org.testfx', name: 'openjfx-monocle', version: '1.8.0_20'
    testCompile group: 'org.opencv', name: 'opencv-java', version: '3.1.0'
}

evaluationDependsOn(':core')
evaluationDependsOn(':ui:preloader')
if (System.getProperty("os.name").toLowerCase().contains("linux")) {
    jfxNative.dependsOn tasks.getByPath(':ui:linuxLauncher:linuxLauncherExecutable')
}
compileTestJava.dependsOn tasks.getByPath(':core:testClasses')


/*
 * Allows you to run the UI tests in headless mode by calling gradle with the -Pheadless=true argument
 */
if (project.hasProperty('headless') && project.headless) {
    println "Running UI Tests Headless"
    test {
        jvmArgs = ['-Djava.awt.headless=true', '-Dtestfx.robot=glass', '-Dtestfx.headless=true', '-Dprism.order=sw', '-Dprism.text=t2k']
    }
}

task testSharedLib() {
    description 'Compiles the shared library used by c++ generation testing.'
    doLast {
        def syst = osdetector.os
        if(syst == "windows") {
            exec {
                ignoreExitValue true//if clean hasn't been called, directory already exists and mkdir fails.
                workingDir 'build/classes/test'
                commandLine 'cmd', '/c', 'mkdir', 'pipelib'
            }
            exec {
                workingDir 'build/classes/test/pipelib'
                commandLine '"C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\vcvarsall.bat"', 'amd64', '&', 'cmake', '-G', 'Visual Studio 14 2015 Win64', '..\\..\\..\\..\\src\\test\\resources\\edu\\wpi\\grip\\ui\\codegeneration\\tools\\'
            }
            exec {
                workingDir 'build/classes/test/pipelib'
                commandLine '"C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\vcvarsall.bat"', 'amd64', '&', 'cmake', '--build', '.', '--target', 'ALL_BUILD', '--config', 'Release'
            }
            exec {
                workingDir 'build/classes/test'
                commandLine 'cmd', '/C', 'copy /Y pipelib\\Release\\* .'
            }
            exec {
                workingDir 'build/classes/test'
                commandLine 'cmd', '/C', 'copy /Y pipelib\\pipe\\Release\\* .'
            }
            exec {
                workingDir 'build/classes/test/pipelib'
                commandLine 'cmd', '/C', 'copy /Y ..\\..\\..\\..\\src\\test\\resources\\edu\\wpi\\grip\\ui\\codegeneration\\tools\\pipe\\AbsPipeline.h pipe\\'
            }
            exec {
                workingDir 'build/classes/test'
                commandLine 'cmd', '/C', 'copy /Y ..\\..\\..\\src\\test\\resources\\edu\\wpi\\grip\\ui\\codegeneration\\tools\\realpipe\\CMakeLists.txt .'
            }
        } else {
            exec {
                ignoreExitValue true//if clean hasn't been called, directory already exists and mkdir fails.
                workingDir 'build/classes/test'
                commandLine 'mkdir', 'pipelib'
            }
            exec {
                workingDir 'build/classes/test/pipelib'
                commandLine 'cmake' , '../../../../src/test/resources/edu/wpi/grip/ui/codegeneration/tools/'
            }
            exec {
                workingDir 'build/classes/test/pipelib'
                commandLine 'make'
            }
            exec {
                workingDir 'build/classes/test'
                if(syst == "osx"){
                    commandLine 'cp', 'pipelib/libgenJNI.dylib', '.'
                }
                if(syst == "linux"){
                    commandLine 'cp' , 'pipelib/libgenJNI.so', '.'
                }
            }
            exec {
                workingDir 'build/classes/test/pipelib'
                commandLine 'cp' , '../../../../src/test/resources/edu/wpi/grip/ui/codegeneration/tools/pipe/AbsPipeline.h', 'pipe/'
            }
            exec {
                workingDir 'build/classes/test'
                commandLine 'cp', '../../../src/test/resources/edu/wpi/grip/ui/codegeneration/tools/realpipe/CMakeLists.txt', '.'
            }
        }
    }
}

if(project.hasProperty('generation') || project.hasProperty('genonly')){
    def syst = osdetector.os
    test {
        edu.wpi.first.wpilib.opencv.installer.platform.Platform platform = Installer.getPlatform()
        Installer.setOpenCvVersion('3.1.0')
        def jniLocation = project.getProperties().getOrDefault('jniLocation', platform.defaultJniLocation())
        Installer.installJni("${jniLocation}")
        def defaultLibPath = System.getProperty('java.library.path');
        jvmArgs = ["-Djava.library.path=${defaultLibPath}${System.getProperty('path.separator')}${jniLocation}"]
        if(project.hasProperty('genonly')){
            useJUnit {
                includeCategories 'edu.wpi.grip.ui.codegeneration.GenerationTesting'
            }
        }
    }
}

def arch = osdetector.arch.replace("x86_64", "x64")

jfx {
    mainClass = "edu.wpi.grip.ui.Main"
    preLoader = "edu.wpi.grip.preloader.GripPreloader"

    identifier = "GRIP"
    appName = "GRIP"
    vendor = "Worcester Polytechnic Institute"
    nativeReleaseVersion = "${version}-${arch}"

    jfxMainAppJarName = "${jfx.appName}-${jfx.nativeReleaseVersion}.jar"

    // -XX:-OmitStackTraceInFastThrow prevents the JIT from eating stack traces that get thrown a lot
    // This is slower but means we actually get the stack traces instead of
    // having them become one line like `java.lang.ArrayIndexOutOfBoundsException`
    // and as such, would be useless.
    // See: https://plumbr.eu/blog/java/on-a-quest-for-missing-stacktraces
    // -Xmx limits the heap size. This prevents memory use from ballooning with a lot
    // of JavaCV native objects being allocated hanging around waiting to get GC'd.
    // -XX:MaxNewSize limits the size of the eden space to force minor GCs to run more often.
    // This causes old mats (which take up little space on the heap but a lot of native memory) to get deallocated
    // and free up native memory quicker, limiting the memory the app takes up.
    jvmArgs = ["-XX:-OmitStackTraceInFastThrow", "-Xmx200m", "-XX:MaxNewSize=32m"]

    bundleArguments = [
            "linux.launcher.url": file('linuxLauncher/build/exe/linuxLauncher/linuxLauncher').toURI().toURL()
    ]
}

application {
    mainClassName = jfx.mainClass
}
