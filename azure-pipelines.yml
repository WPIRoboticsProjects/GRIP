# Gradle
# Build your Java project and run tests with Gradle using a Gradle wrapper script.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/java

trigger:
  - master

resources:
  containers:
    - container: wpilib2019
      image: wpilib/roborio-cross-ubuntu:2019-18.04

jobs:
  - job: Linux
    pool:
      vmImage: 'Ubuntu 16.04'

    container: wpilib2019

    steps:
      - script: |
          $ProgressPreference = 'SilentlyContinue'
          mkdir build
          wget "https://download.java.net/java/early_access/jpackage/30/openjdk-13-jpackage+30_linux-x64_bin.tar.gz" -O "build/jdk-13.tar.gz"
          sudo mkdir /opt/java
          sudo tar -xzvf build/jdk-13.tar.gz -C /opt/java
        displayName: 'Download JDK 13'
      - task: Gradle@2
        inputs:
          workingDirectory: ''
          gradleWrapperFile: 'gradlew'
          gradleOptions: '-Xmx3072m'
          publishJUnitResults: false
          tasks: 'check :ui:jpackage -Pgeneration -PjniLocation=build/OpenCVJNI -Pheadless=true -PlogTests -Pjdk13=/opt/java/jdk-13 --stacktrace'
      - task: CopyFiles@2
        inputs:
          contents: 'ui/build/installer/GRIP-*.deb'
          targetFolder: $(Build.ArtifactStagingDirectory)
      - script: |
          export GH_TOKEN=$(GH_TOKEN)
          .azure-scripts/push-javadoc-to-gh-pages.sh
        displayName: 'Publish Javadocs'
        condition: |
          and(not(eq(variables['Build.Reason'], 'PullRequest')),
              eq(variables['Build.SourceBranch'], 'refs/heads/master'))

      - task: Gradle@2
        inputs:
          workingDirectory: ''
          gradleWrapperFile: 'gradlew'
          gradleOptions: '-Xmx3072m'
          publishJUnitResults: false
          tasks: ':ui:jpackage -Pcuda -Pjdk13=/opt/java/jdk-13 --stacktrace'
      - task: CopyFiles@2
        inputs:
          contents: 'ui/build/installer/GRIP-*.deb'
          targetFolder: $(Build.ArtifactStagingDirectory)

      - task: PublishBuildArtifacts@1
        inputs:
          artifactName: 'LinuxInstaller'

  - job: Windows_64_Bit
    pool:
      vmImage: 'vs2017-win2016'

    steps:
      - script: |
          choco install innosetup -y
        displayName: 'Install Inno Setup'
      - powershell: |
          mkdir build
          $ProgressPreference = 'SilentlyContinue'
          wget "https://download.java.net/java/ga/jdk11/openjdk-11_windows-x64_bin.zip" -O "build\jdk.zip"
        displayName: 'Download JDK'
      - powershell: |
          $ProgressPreference = 'SilentlyContinue'
          wget "https://download.java.net/java/early_access/jpackage/30/openjdk-13-jpackage+30_windows-x64_bin.zip" -O "build\jdk-13.zip"
          Expand-Archive build\jdk-13.zip -DestinationPath build
        displayName: 'Download JDK 13'
      - task: JavaToolInstaller@0
        inputs:
          jdkSourceOption: localDirectory
          jdkFile: 'build/jdk.zip'
          jdkDestinationDirectory: 'build/jdkinst'
          jdkArchitectureOption: x64
      - task: Gradle@2
        inputs:
          workingDirectory: ''
          gradleWrapperFile: 'gradlew'
          gradleOptions: '-Xmx3072m'
          jdkVersionOption: '1.11'
          jdkArchitectureOption: 'x64'
          publishJUnitResults: true
          tasks: 'check :ui:jpackage -Pheadless=true -Pgeneration -PlogTests -Pjdk13=..\build\jdk-13 --stacktrace'
      - task: CopyFiles@2
        inputs:
          contents: 'ui\build\installer\GRIP-*.exe'
          targetFolder: $(Build.ArtifactStagingDirectory)

      - task: Gradle@2
        inputs:
          workingDirectory: ''
          gradleWrapperFile: 'gradlew'
          gradleOptions: '-Xmx3072m'
          publishJUnitResults: false
          tasks: ':ui:jpackage -Pcuda -Pjdk13=..\build\jdk-13 --stacktrace'
      - task: CopyFiles@2
        inputs:
          contents: 'ui\build\installer\GRIP-*.exe'
          targetFolder: $(Build.ArtifactStagingDirectory)

      - task: PublishBuildArtifacts@1
        inputs:
          artifactName: 'Win64Installer'

  - job: Windows_32_Bit
    pool:
      vmImage: 'vs2017-win2016'

    steps:
      - script: |
          choco install innosetup -y
        displayName: 'Install Inno Setup'
      - powershell: |
          mkdir build
          $ProgressPreference = 'SilentlyContinue'
          wget "https://github.com/wpilibsuite/frc-openjdk-windows/releases/download/v11.0.0u28-1/jdk-x86-11.0.0u28-1.zip" -O "build\jdk.zip"
        displayName: 'Download JDK'
      - task: JavaToolInstaller@0
        inputs:
          jdkSourceOption: localDirectory
          jdkFile: 'build/jdk.zip'
          jdkDestinationDirectory: 'build/jdkinst'
          jdkArchitectureOption: x86
      - task: Gradle@2
        inputs:
          workingDirectory: ''
          gradleWrapperFile: 'gradlew'
          gradleOptions: '-Xmx1024m'
          publishJUnitResults: false
          # TODO: run :ui:jpackage once we have a JDK 13 build for 32-bit Windows
          tasks: 'check -Pheadless=true -Pgeneration -PlogTests --stacktrace'

      - task: CopyFiles@2
        inputs:
          contents: 'ui\build\installer\GRIP-*.exe'
          targetFolder: $(Build.ArtifactStagingDirectory)

      - task: PublishBuildArtifacts@1
        inputs:
          artifactName: 'Win32Installer'

  - job: Mac
    pool:
      vmImage: 'xcode9-macos10.13'

    steps:
      - script: |
          mkdir build
          wget "https://download.java.net/java/ga/jdk11/openjdk-11_osx-x64_bin.tar.gz" -O "build/jdk.tar.gz"
          wget "https://download.java.net/java/early_access/jpackage/30/openjdk-13-jpackage+30_osx-x64_bin.tar.gz" -O "build/jdk-13.tar.gz"
          sudo tar xzvf build/jdk-13.tar.gz -C /Library/Java/JavaVirtualMachines/
          sudo tar xvzf build/jdk.tar.gz -C /Library/Java/JavaVirtualMachines/
          export JAVA_HOME=/Library/Java/JavaVirtualMachines/jdk-11.jdk/Contents/Home/
        displayName: 'Setup JDK'
      - task: Gradle@2
        inputs:
          workingDirectory: ''
          gradleWrapperFile: 'gradlew'
          gradleOptions: '-Xmx3072m'
          jdkVersionOption: '1.11'
          jdkArchitectureOption: 'x64'
          publishJUnitResults: false
          tasks: 'check :ui:jpackage -Pheadless=true -Pgeneration -PlogTests -Pjdk13=/Library/Java/JavaVirtualMachines/jdk-13.jdk/Contents/Home/ --stacktrace'
      - task: CopyFiles@2
        inputs:
          contents: 'ui/build/installer/*'
          targetFolder: $(Build.ArtifactStagingDirectory)
      - task: Gradle@2
        inputs:
          workingDirectory: ''
          gradleWrapperFile: 'gradlew'
          gradleOptions: '-Xmx3072m'
          jdkVersionOption: '1.11'
          jdkArchitectureOption: 'x64'
          publishJUnitResults: false
          tasks: ':ui:jpackage -Pcuda -Pjdk13=/Library/Java/JavaVirtualMachines/jdk-13.jdk/Contents/Home/ --stacktrace'

      - task: CopyFiles@2
        inputs:
          contents: 'ui/build/installer/*'
          targetFolder: $(Build.ArtifactStagingDirectory)

      - task: PublishBuildArtifacts@1
        inputs:
          artifactName: 'MacInstaller'

  # JDK 8 agent for UI tests
  - job: Mac_UI_Testing
    pool:
      vmImage: 'xcode9-macos10.13'

    steps:
      - script: |
          mkdir build
          wget "https://cdn.azul.com/zulu/bin/zulu8.38.0.13-ca-fx-jdk8.0.212-macosx_x64.tar.gz" -O "build/jdk.tar.gz"
          sudo tar xzvf build/jdk.tar.gz -C /Library/Java/JavaVirtualMachines/
        displayName: 'Install ZuluFX'
      - task: Gradle@2
        inputs:
          workingDirectory: ''
          gradleWrapperFile: 'gradlew'
          gradleOptions: '-Xmx3072m -Dorg.gradle.java.home=/Library/Java/JavaVirtualMachines/zulu8.38.0.13-ca-fx-jdk8.0.212-macosx_x64'
          publishJUnitResults: false
          tasks: 'check jacocoTestReport jacocoRootReport -Pheadless=true -Pgeneration -PlogTests --stacktrace'
      - script: |
          curl -s https://codecov.io/bash > .codecov
          chmod +x .codecov
          ./.codecov -t $(CODECOV_TOKEN)
        displayName: 'Upload jacoco reports to codecov'
