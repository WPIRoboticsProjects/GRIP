buildscript {
    repositories { jcenter() }

    dependencies {
        classpath 'com.netflix.nebula:gradle-aggregate-javadocs-plugin:2.2.+'
    }
}
plugins {
    id 'java'
    id 'idea'
    id 'eclipse'
    id 'jacoco'
    id 'com.google.osdetector' version '1.4.0'
    id 'com.github.johnrengelman.shadow' version '1.2.2'
}
apply plugin: 'nebula-aggregate-javadocs'


allprojects {
    apply plugin: 'java'
    apply plugin: 'application'


    repositories {
        mavenCentral()
        jcenter()
    }

    dependencies {
        testCompile group: 'org.hamcrest', name: 'hamcrest-all', version: '1.3'
        testCompile group: 'junit', name: 'junit', version: '4.12'
    }

    version = '0.2.0'

    jacocoTestReport {
        reports {
            xml.enabled = true
            html.enabled = true
        }
    }
    check.dependsOn jacocoTestReport

    tasks.withType(Javadoc) {
        source compileJava.source
        options.addStringOption('Xdoclint:all,-html', '-quiet')
        failOnError false
    }

    // Turn on test results
    test {
        testLogging {
            events "failed"
            exceptionFormat "full"
        }
    }
}

def os = osdetector.classifier.replace("osx", "macosx")

project(":core") {
    apply plugin: 'java'
    apply plugin: 'idea'
    apply plugin: "com.github.johnrengelman.shadow"

    configurations {
        shadow
    }

    repositories {
        flatDir {
            dirs 'libs'
        }
    }

    dependencies {
        compile group: 'org.bytedeco', name: 'javacv', version: '1.1'
        compile group: 'org.bytedeco.javacpp-presets', name: 'opencv', version: '3.0.0-1.1'
        compile group: 'org.bytedeco.javacpp-presets', name: 'opencv', version: '3.0.0-1.1', classifier: os
        compile group: 'org.bytedeco.javacpp-presets', name: 'opencv-3.0.0-1.1', classifier: 'linux-frc'
        compile group: 'org.bytedeco.javacpp-presets', name: 'videoinput', version: '0.200-1.1', classifier: os
        compile group: 'org.python', name: 'jython', version: '2.7.0'
        compile group: 'com.thoughtworks.xstream', name: 'xstream', version: '1.4.8'
        compile group: 'org.apache.commons', name: 'commons-lang3', version: '3.4'
        compile group: 'com.google.guava', name: 'guava', version: '18.0'
    }

    mainClassName = 'edu.wpi.grip.core.Main'

    jar {
        manifest {
            attributes 'Implementation-Version': version, 'Main-Class': mainClassName
        }
    }

    shadowJar {
        artifacts {
            shadow(tasks.shadowJar.archivePath) {
                builtBy shadowJar
            }
        }
    }

    sourceSets {
        generated {
            java {
                /* Note: When referencing this it becomes `srcDirs` */
                srcDir 'src/generated/java'
            }
        }
    }

    task generateCodeFromSource(type: CodeGenerator) {
        description 'Generates the Operation Wrappers for the OpenCV methods.\n To skip run with parm `-PskipGenerate`'
        dest sourceSets.generated.java.srcDirs
        removeExisting true
    }
    generateCodeFromSource.onlyIf { !project.hasProperty('skipGenerate') }
    compileJava.source sourceSets.generated.java, sourceSets.main.java
    compileJava.dependsOn generateCodeFromSource

    // IDE setup
    eclipse.classpath {
        file.whenMerged { cp ->
            sourceSets.generated.java.srcDirs.forEach { srcDir ->
                def source_folder = new org.gradle.plugins.ide.eclipse.model.SourceFolder(srcDir.getAbsolutePath(), "build/classes/merged")
                if (cp.entries.find() { it.path == source_folder.path } == null)
                    cp.entries.add(source_folder)
            }
        }
    }

    idea.module {
        sourceDirs += sourceSets.generated.java.srcDirs
    }
    // End IDE setup
}

project(":ui") {
    apply plugin: 'java'
    apply plugin: 'idea'
    apply plugin: 'application'
    apply from: 'http://dl.bintray.com/shemnon/javafx-gradle/8.1.1/javafx.plugin'

    configurations {
        ideProvider
    }

    dependencies {
        compile project(path: ':core', configuration: 'shadow')
        ideProvider project(path: ':core', configuration: 'compile')
        compile group: 'org.controlsfx', name: 'controlsfx', version: '8.40.10'
        testCompile files(project(':core').sourceSets.test.output.classesDir)
        testCompile group: 'org.testfx', name: 'testfx-core', version: '4.0.+'
        testCompile group: 'org.testfx', name: 'testfx-junit', version: '4.0.+'
    }

    evaluationDependsOn(':core')
    compileTestJava.dependsOn tasks.getByPath(':core:testClasses')

    idea.module {
        scopes.PROVIDED.plus += [configurations.ideProvider]
    }

    javafx {
        appID = 'GRIP'
        appName = 'GRIP'
        mainClass = "edu.wpi.grip.ui.Main"
    }
    mainClassName = javafx.mainClass
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.9'
}
